{"version":3,"sources":["constants/Colors.js","screens/Main.js","screens/Search.js","App.js","serviceWorker.js","index.js"],"names":["Colors","green","green10","yellow","yellow10","orange","orange10","red","red10","purple","purple10","blue","blue10","maroon","maroon10","white90","white50","white25","black90","black50","black25","Main","react_default","a","createElement","className","style","backgroundColor","src","alt","href","color","lib_default","name","Search","google","window","Geosuggest_esm","placeholder","initialValue","fixtures","label","location","lat","lng","maps","LatLng","radius","autofocus","country","MainPage","screens_Main","SearchPage","screens_Search","Users","App","react_router_dom","basename","react_router","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.148c1ffa.chunk.js","sourcesContent":["export default {\n  green: 'rgba(60,200,106,1)',\n  green10: 'rgba(60,200,106,.1)',\n  yellow: 'rgba(218,197,10,1)',\n  yellow10: 'rgba(218,197,10,.1)',\n  orange: 'rgba(255,111,76,1)',\n  orange10: 'rgba(255,111,76,.1)',\n  red: 'rgba(255,76,91,1)',\n  red10: 'rgba(255,76,91,.1)',\n  purple: 'rgba(141,76,255,1)',\n  purple10: 'rgba(141,76,255,.1)',\n  blue: 'rgba(76,131,255,1)',\n  blue10: 'rgba(76,131,255,.1)',\n  maroon: 'rgba(130,44,60,1)',\n  maroon10: 'rgba(130,44,60,.1)',\n  white90: 'rgba(255,255,255,.9)',\n  white50: 'rgba(255,255,255,.5)',\n  white25: 'rgba(255,255,255,.25)',\n  black90: 'rgba(0,0,0,.9)',\n  black50: 'rgba(0,0,0,.5)',\n  black25: 'rgba(0,0,0,.25)',\n};\n","import React from 'react';\nimport FA from 'react-fontawesome';\nimport Colors from '../constants/Colors';\n\nfunction Main() {\n\n  return (\n    <div className=\"App\" style={{backgroundColor: Colors.purple10}}>\n      <div className=\"sol\" style={{backgroundColor: Colors.purple}}>\n      </div>\n      <img className=\"sol shadow spin\" src=\"shadows.svg\" alt=\"sun-shadow\"/>\n      <div className=\"content\">\n        <div className=\"label\">UV Index for</div>\n          <div className=\"location-name\">\n            <a href=\"/search\">San Jose, CA</a>\n          </div>\n        <div className=\"uv-number\" style={{color: Colors.purple}}>11</div>\n        <div className=\"uv-status\" style={{color: Colors.purple}}>Extreme</div>\n      </div>\n      <div className=\"fixed-button\">\n        <a href=\"/search\">\n          <FA name=\"search\" />\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport Geosuggest from 'react-geosuggest';\nimport FA from 'react-fontawesome';\nimport Colors from '../constants/Colors';\n\nfunction Search() {\n  const fixtures = [\n    {label: 'San Jose, CA', location: {lat: 37.8272, lng: 122.2913}},\n  ];\n\n  const google = window.google;\n\n  return (\n    <div className=\"App\">\n      <div className=\"search-container\">\n        <div className=\"title\">Search</div>\n        <Geosuggest\n          placeholder=\"Start typing!\"\n          initialValue=\"San Jose, CA\"\n          fixtures={fixtures}\n          location={new google.maps.LatLng(37.8272, 122.2913)}\n          radius=\"20\" autofocus={true}\n          country=\"us\"\n           />\n         <div className=\"fixed-button invert\" style={{backgroundColor: Colors.green}}>\n          <a href=\"/\">\n            <FA name=\"check\" />\n          </a>\n        </div>\n        <div className=\"fixed-button cancel\" style={{backgroundColor: Colors.white25}}>\n          <a href=\"/\">\n            <FA name=\"times\" />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Main from './screens/Main';\nimport Search from './screens/Search';\nimport './App.css';\n\nfunction MainPage() {\n  return <Main />;\n}\n\nfunction SearchPage() {\n  return <Search />;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\n\nfunction App() {\n  return (\n    <Router basename=\"public\">\n      <div>\n        <Route path=\"/\" exact component={MainPage} />\n        <Route path=\"/search/\" component={SearchPage} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}